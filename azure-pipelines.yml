trigger:
- master
- develop
- feature/*
- hotfix/*
- fix/*

pr:
- master
- develop

stages:

- stage: CI
  displayName: CI - Stage
  pool:
    vmImage: ubuntu-latest
  jobs:
    - job: Build
      steps:

      - task: Maven@3
        displayName: Maven Package
        inputs:
          mavenPomFile: 'pom.xml'
          goals: 'clean package'
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          codeCoverageToolOption: 'JaCoCo'
          codeCoverageRestoreOriginalPomXml: true
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.8'
          mavenVersionOption: 'Default'
          mavenOptions: '-Xmx3072m'

      - task: DockerInstaller@0
        displayName: Docker Install
        inputs:
          dockerVersion: 17.09.0-ce

      - task: Docker@2
        displayName: Docker Build
        inputs:
          repository: kvncont/hello-world
          command: build
          Dockerfile: '**/Dockerfile'
          tags: $(Build.BuildId)

      - task: Docker@2
        displayName: Docker Push
        condition: and(succeeded(), or(startsWith(variables['Build.SourceBranch'], 'refs/pull/'), eq(variables['Build.SourceBranch'], 'refs/heads/master')))
        inputs:
          containerRegistry: Docker Registry
          repository: kvncont/hello-world
          command: push
          tags: $(Build.BuildId)

      - task: PublishPipelineArtifact@1
        displayName: Upload Manifest
        inputs:
          targetPath: $(Build.SourcesDirectory)/deployment.yml
          artifact: manifest
          publishLocation: pipeline

- stage: CD_DEV
  displayName: CD Dev - Stage
  condition: and(succeeded(), or(startsWith(variables['Build.SourceBranch'], 'refs/pull/'), eq(variables['Build.SourceBranch'], 'refs/heads/master')))
  dependsOn: CI
  jobs:

  - deployment: DeployDev
    displayName: Deploy - Dev
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    environment: Development.app
    strategy:
      runOnce:
        deploy:
          steps:

          - task: DownloadPipelineArtifact@2
            displayName: Download Manifest
            inputs:
              buildType: 'current'
              artifactName: 'manifest'
              itemPattern: '**/deployment.yml'
              targetPath: '$(Build.SourcesDirectory)'

          - task: KubernetesManifest@0
            displayName: Create Secret
            inputs:
              action: createSecret
              secretType: dockerRegistry
              secretName: docker-registry-kvncont
              dockerRegistryEndpoint: Docker Registry

          - task: KubernetesManifest@0
            displayName: Deploy Manifest
            inputs:
              action: deploy
              manifests: deployment.yml
              containers: kvncont/hello-world:$(Build.BuildId)
              rolloutStatusTimeout: '300'

- stage: CD_PRO
  displayName: CD Pro - Stage
  dependsOn: CD_DEV
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:

  - deployment: DeployEastUS2Pro
    displayName: Deploy East US 2 - Pro
    environment: Production.eastus2
    strategy:
      runOnce:
        deploy:
          steps:

          - task: KubernetesManifest@0
            displayName: Create Secret
            inputs:
              action: createSecret
              secretType: dockerRegistry
              secretName: docker-registry-kvncont
              dockerRegistryEndpoint: Docker Registry

          - task: KubernetesManifest@0
            displayName: Deploy Manifest
            inputs:
              action: deploy
              manifests: $(Pipeline.Workspace)/manifest/deployment.yml
              containers: kvncont/hello-world:$(Build.BuildId)
              rolloutStatusTimeout: 300
          
  - deployment: DeployCentralUSPro
    displayName: Deploy Central US - Pro
    environment: Production.centralus
    strategy:
      runOnce:
        deploy:
          steps:

          - task: KubernetesManifest@0
            displayName: Create Secret
            inputs:
              action: createSecret
              secretType: dockerRegistry
              secretName: docker-registry-kvncont
              dockerRegistryEndpoint: Docker Registry

          - task: KubernetesManifest@0
            displayName: Deploy Manifest
            inputs:
              action: deploy
              manifests: $(Pipeline.Workspace)/manifest/deployment.yml
              containers: kvncont/hello-world:$(Build.BuildId)
              rolloutStatusTimeout: 300
