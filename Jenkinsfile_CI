pipeline{
    agent any
    options {
        timeout(time: 15, unit: "MINUTES")
        disableConcurrentBuilds()
        timestamps()
    }
    parameters{
        string(name: "CHART_VERSION", defaultValue: "", description: "This version number should be incremented each time you make changes. Versions are expected to follow Semantic Versioning 0.1.0 (https://semver.org/)")
    }
    stages{
        stage("Maven"){
            tools{
                maven "apache-maven-3.6.3"
            }
            steps{
                sh "mvn clean package"
            }
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "========A executed successfully========"
                }
                failure{
                    echo "========A execution failed========"
                }
            }
        }
        stage("Docker"){
            environment{
                IMAGE = "hello-world"
                REGISTRY = "docker.io"
                REPOSITORY = "kvncont"
                TAG = "${GIT_COMMIT}"
            }
            steps{
                script{
                    withCredentials([usernamePassword(credentialsId: "DOCKER_REGISTRY", passwordVariable: "PASSWORD", usernameVariable: "USERNAME")]) {
                        sh "docker login --username ${USERNAME} --password ${PASSWORD}"
                    }
                    sh "docker build -t ${REGISTRY}/${REPOSITORY}/${IMAGE}:${TAG} ."
                    echo "Scanning image (anchore, trivy, etc)"
                    sh "docker push ${REGISTRY}/${REPOSITORY}/${IMAGE}:${TAG}"
                }
            }
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "========A executed successfully========"
                }
                failure{
                    echo "========A execution failed========"
                }
            }
        }
        stage("Helm"){
            environment{
                CHART_NAME = "hello-world"
                CHART_VERSION = "${params.CHART_VERSION}"
                REPOSITORY_NAME = "chartmuseum"
                REPOSITORY_URL = "http://chart-museum:8080"
            }
            steps{
                sh "helm repo add ${REPOSITORY_NAME} ${REPOSITORY_URL}"
                sh "helm repo update"
                sh "helm search repo ${CHART_NAME}"
                sh "helm push hello-world/ chartmuseum --version ${CHART_VERSION}"
                sh "helm repo update"
                sh "helm search repo ${CHART_NAME}"
            }
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "========A executed successfully========"
                }
                failure{
                    echo "========A execution failed========"
                }
            }
        }
        stage ("Deploy K8s") {
            steps {
                build wait: false, propagate: false, job: "HelloWorldCD/master",
                parameters: [
                    string(name: "CHART_VERSION", value: "${CHART_VERSION}")
                ]
            }
        }
    }
    post{
        always{
            echo "========always========"
        }
        success{
            echo "========pipeline executed successfully ========"
        }
        failure{
            echo "========pipeline execution failed========"
        }
    }
}